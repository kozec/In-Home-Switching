diff -NBaur ffmpeg-4.0.1.old/configure ffmpeg-4.0.1.new/configure
--- ffmpeg-4.0.1.old/configure	2018-06-16 02:12:16.000000000 +0100
+++ ffmpeg-4.0.1.new/configure	2019-02-01 09:37:02.607342895 +0000
@@ -5250,6 +5250,9 @@
         ;;
     minix)
         ;;
+    horizon)
+        network_extralibs="-lnx"
+        ;;
     none)
         ;;
     *)
diff -NBaur ffmpeg-4.0.1.old/libavfilter/vf_drawtext.c ffmpeg-4.0.1.new/libavfilter/vf_drawtext.c
--- ffmpeg-4.0.1.old/libavfilter/vf_drawtext.c	2018-04-20 11:02:57.000000000 +0100
+++ ffmpeg-4.0.1.new/libavfilter/vf_drawtext.c	2019-02-01 09:31:26.128712790 +0000
@@ -37,7 +37,9 @@
 #if HAVE_UNISTD_H
 #include <unistd.h>
 #endif
+#ifndef __SWITCH__
 #include <fenv.h>
+#endif
 
 #if CONFIG_LIBFONTCONFIG
 #include <fontconfig/fontconfig.h>
@@ -1038,12 +1040,16 @@
         }
     }
 
+#ifndef __SWITCH__
     feclearexcept(FE_ALL_EXCEPT);
+#endif
     intval = res;
+#ifndef __SWITCH__
     if ((ret = fetestexcept(FE_INVALID|FE_OVERFLOW|FE_UNDERFLOW))) {
         av_log(ctx, AV_LOG_ERROR, "Conversion of floating-point result to int failed. Control register: 0x%08x. Conversion result: %d\n", ret, intval);
         return AVERROR(EINVAL);
     }
+#endif
 
     if (argc == 3)
         av_strlcatf(fmt_str, sizeof(fmt_str), "0%u", positions);

--- old/libavformat/os_support.c.orig	2019-07-29 17:02:31.924985025 +0200
+++ new/libavformat/os_support.c	2019-07-29 17:08:24.505003410 +0200
@@ -45,6 +45,7 @@
 
 #if !HAVE_GETADDRINFO
 #if !HAVE_INET_ATON
+#ifndef __SWITCH__
 #include <stdlib.h>
 
 static int inet_aton(const char *str, struct in_addr *add)
@@ -61,6 +62,7 @@
 
     return 1;
 }
+#endif /* ifndef __SWITCH__ */
 #endif /* !HAVE_INET_ATON */
 
 int ff_getaddrinfo(const char *node, const char *service,

--- ffmpeg-4.1.4/libavformat/tcp.c.orig	2019-07-29 17:13:20.258352169 +0200
+++ ffmpeg-4.1.4/libavformat/tcp.c	2019-07-29 17:12:59.221684405 +0200
@@ -91,11 +91,13 @@
         }
     }
 #if !HAVE_WINSOCK2_H
+#ifndef __SWITCH__
     if (s->tcp_mss > 0) {
         if (setsockopt (fd, IPPROTO_TCP, TCP_MAXSEG, &s->tcp_mss, sizeof (s->tcp_mss))) {
             ff_log_net_error(ctx, AV_LOG_WARNING, "setsockopt(TCP_MAXSEG)");
         }
     }
+#endif /* ifndef __SWITCH__ */
 #endif /* !HAVE_WINSOCK2_H */
 }
 

--- old/libavformat/udp.c.orig	2019-07-29 17:39:44.985101475 +0200
+++ new/libavformat/udp.c	2019-07-29 19:15:50.505402142 +0200
@@ -47,6 +47,10 @@
 #include "TargetConditionals.h"
 #endif
 
+#ifdef __SWITCH__
+#define HAVE_PTHREAD_CANCEL 0
+#endif
+
 #if HAVE_UDPLITE_H
 #include "udplite.h"
 #else
@@ -766,6 +770,8 @@
         s->reuse_socket = 1;
         if (setsockopt (udp_fd, SOL_SOCKET, SO_REUSEADDR, &(s->reuse_socket), sizeof(s->reuse_socket)) != 0)
             goto fail;
+        if (setsockopt (udp_fd, SOL_SOCKET, SO_REUSEPORT, &(s->reuse_socket), sizeof(s->reuse_socket)) != 0)
+            goto fail;
     }
 
     if (s->is_broadcast) {

